// tslint:disable-next-line:max-line-length
import {DEvent, DEventLog, EventType, EventSubscriber, DEventSource, CounterTooHighError, Events, EventGcInclusionFilter, EventPayloadType, ReorderChildNodeEventPayload} from './eventlog'
import Dexie from 'dexie'
import {generateUUID} from '../util'
import {VectorClock} from '../lib/vectorclock'

/**
 * "Database Schema" for events stored in the 'eventlog' table in the indexeddb.
 */
interface StoredEvent {
  eventid?: number,
  eventtype: number,
  treenodeid: string,
  peerid: string,
  vectorclock: VectorClock,
  payload: EventPayloadType,
}

/**
 * An event log implementation for the client that uses IndexedDb as a persistent
 * store for its own metadata and its eventlog
 *
 * TODO: do we need to make this multi document capable? Currently assumes one log, one document
 */
export class LocalEventLog implements DEventSource, DEventLog {

  readonly db: Dexie
  readonly name: string
  private peerId: string
  private vectorClock: VectorClock
  private counter: number
  private subscribers: EventSubscriber[] = []

  // For the child order event log we need a special garbage collection filter because
  // with logoot events for a sequence we don't just want to retain the newest event for each
  // parent, rather we need to retain the newest event for a particular child for that parent and
  // additionally take into account the operation type. We need to retain the newest DELETE as well
  // as INSERT operation so we can reliably rebuild the sequence
  // TODO: unsure whether it is "ok" to have this hardcoded knowledge about LOGOOT and the childorder
  // event log in this class. Alternatively we can define this somewhere else and inject a
  // Map<EventType, EventGcInclusionFilter> in this class
  private readonly LOGOOT_EVENT_GC_FILTER: EventGcInclusionFilter =
  (newEventPayload: ReorderChildNodeEventPayload, oldEventPayload: ReorderChildNodeEventPayload) => {
    return newEventPayload.childId === oldEventPayload.childId
      && newEventPayload.operation === oldEventPayload.operation
  }

  constructor(readonly dbName: string) {
    this.db = new Dexie(dbName)
    this.name = dbName
  }

  async init(): Promise<LocalEventLog> {
    this.db.version(1).stores({
      peer: 'eventlogid', // columns: eventlogid, vectorclock, counter
      eventlog: '++eventid,treenodeid', // see StoredEvent for schema
    })
    await this.db.open()
    await this.loadOrCreateMetadata()
    return this
  }

  private loadOrCreateMetadata(): Promise<void> {
    return this.db.table('peer').toArray().then(metadata => {
      if (!metadata || metadata.length === 0) {
        this.peerId = generateUUID()
        this.vectorClock = new VectorClock()
        // always start a new vectorclock on 1 for the current peer
        this.vectorClock.increment(this.peerId)
        // it is important that the counter starts at 0: we later set the counter
        // to be the primary key that is generated by dexie in the indexeddb,
        // if we set it to 1, it will have that value double
        this.counter = 0
        return this.saveMetadata()
      } else {
        const md = metadata[0]
        this.peerId = md.eventlogid
        this.vectorClock = new VectorClock(md.vectorClock)
        this.counter = md.counter
      }
    })
  }

  private saveMetadata(): Promise<any> {
    const metadata = {
      eventlogid: this.peerId,
      vectorclock: this.vectorClock.values,
      counter: this.counter,
    }
    return this.db.table('peer').put(metadata)
      .catch(error => console.error(`saveMetadata error: `, error))
  }

  getPeerId(): string {
    return this.peerId
  }

  getName(): string {
    return this.name
  }

  getCounter(): number {
    return this.counter
  }

  publish(type: EventType, nodeId: string, payload: EventPayloadType): Promise<any> {
    this.vectorClock.increment(this.peerId)
    return this.insert([new DEvent(type, this.peerId, this.vectorClock, nodeId, payload)])
  }

  /**
   * 1. persist the event in indexeddb
   * 2. compact the store by removing redundant events
   * 3. (later) update the in memory maps (parent map, child map)
   * 4. async notify any subscribers that are interested
   *
   * @param events The events to persist and rebroadcast.
   */
  async insert(events: DEvent[]): Promise<any> {
    if (events.length === 0) {
      return Promise.resolve()
    }
    try {
      console.debug(`Inserting events into local log`)
      let eventCounter = -1
      for (const event of events) {
        eventCounter = await this.storeAndGarbageCollect(event)
      }
      // We only store the latest eventid as the new max counter if it is really
      // higher than the current state. In case of concurrent updates to the db
      // (for example a local insert and some remote server events) it may happen
      // that the updates are interleaved and we need to check here whether we
      // really do have the largest counter.
      if (eventCounter > this.counter) {
        this.counter = eventCounter
      }
      await this.saveMetadata()
      window.setTimeout(() => {
        console.debug(`Notifying subscribers`)
        this.notifySubscribers(events)
      }, 1)
      return Promise.resolve()
    } catch (err) {
      // TODO: do something more clever with errors?
      // tslint:disable-next-line:no-console
      console.error(`ERROR occurred during nodeEvent storage: `, err)
    }
  }

  subscribe(subscriber: EventSubscriber): void {
    this.subscribers.push(subscriber)
  }

  private storedEventToDEventMapper(ev: StoredEvent): DEvent {
    return new DEvent(ev.eventtype, ev.peerid, new VectorClock(ev.vectorclock), ev.treenodeid, ev.payload)
  }

  getEventsSince(eventTypes: EventType[], counter: number, peerId?: string): Promise<Events> {
    if (counter > this.counter) {
      throw new CounterTooHighError(`The eventlog has a counter of ${this.counter}` +
        ` but events were requested since ${counter}`)
    }
    const table = this.db.table('eventlog')
    let query = table.where('eventid').above(counter).and(event => eventTypes.indexOf(event.eventtype) !== -1)
    if (peerId) {
      query = query.and(event => event.peerid === peerId)
    }
    return query.toArray()
      .then((events: StoredEvent[]) => {
        this.sortCausally(events)
        // This code is a bit of a cop out: we should not need this since this.counter is always
        // set to the highest stored event id when we insert() it into the database.
        // However we observed a counter being one off (and lower) than the real max event
        // and this causes a endless loop of claiming to have new events and pushing it to the
        // server. This is a sort of sanity check to correct the counter should it be off.
        // I have no idea why the code in insert() should not suffice.
        let wasMaxCounterUpdated = false
        for (const event of events) {
          if (event.eventid > this.counter) {
            console.warn(`Unexpected state: local counter is not the max event id in the db, this should not happen (see insert())`)
            this.counter = event.eventid
            wasMaxCounterUpdated = true
          }
        }
        if (wasMaxCounterUpdated) {
          this.saveMetadata()
        }
        return events.map(this.storedEventToDEventMapper)
      })
      .then((events: DEvent[]) => ({counter: this.counter, events}))
  }

  getNodeEvent(nodeId: string): Promise<DEvent> {
    const table = this.db.table('eventlog')
    return table.where('treenodeid').equals(nodeId).and(event => event.eventtype === EventType.ADD_OR_UPDATE_NODE).toArray()
      .then((events: StoredEvent[]) => {
        if (events.length === 0) {
          return null
        }
        // It can happen that we get multiple events for one node, depending on whether
        // the garbage collection has already run or not for this event. So we may need
        // to do some ad hoc garbage collection here.
        if (events.length > 1) {
          this.sortCausally(events)
        }
        return this.storedEventToDEventMapper(events[events.length - 1])
      })
  }

  private notifySubscribers(events: DEvent[]): void {
    for (const subscriber of this.subscribers) {
      const filteredEvents = events.filter((e) => subscriber.filter(e))
      if (filteredEvents.length > 0) {
        subscriber.notify(filteredEvents)
      }
    }
  }

  private async storeAndGarbageCollect(event: DEvent): Promise<number> {
    const primaryKey = await this.store(event)
    await this.garbageCollect(event)
    console.debug(`Finished storeAndGarbageCollect`)
    return primaryKey
  }

  // TODO: react to errors better!
  private store(event: DEvent): Promise<number> {
    const table = this.db.table('eventlog')
    return table.put({
      eventtype: event.type,
      treenodeid: event.nodeId,
      peerid: event.originator,
      vectorclock: event.clock,
      payload: event.payload,
    }).catch(error => console.error(`store error: `, error))
  }

  private garbageCollect(event: DEvent): Promise<any> {
    const table = this.db.table('eventlog')
    return table.where('treenodeid').equals(event.nodeId)
      // TODO: (perf) make a compound key for treenodeid and eventtype so we can query directly for them
      .and(storedEvent => storedEvent.eventtype === event.type).toArray()
      .then((nodeEvents: StoredEvent[]) => {
        const eventsToDelete = this.findEventsToPrune(nodeEvents, event)
        if (eventsToDelete.length > 0) {
          // console.log(`garbageCollect: bulkdelete of `, eventsToDelete)
          return table.bulkDelete(eventsToDelete.map((e) => e.eventid))
        }
      })
  }

  private findEventsToPrune(events: StoredEvent[], newEvent: DEvent): StoredEvent[] {
    if (events.length > 1) {
      // if we have a garbagecollectionfilter set we need to remove all stored events that are not
      // included by it (this is needed when the treenode itself is not sufficient for filtering)
      if (newEvent.type === EventType.REORDER_CHILD) {
        events = events.filter(ev => this.LOGOOT_EVENT_GC_FILTER(newEvent.payload, ev.payload))
      }
      this.sortCausally(events)
      // remove the last element, which is also the newest event which we want to retain
      events.splice(-1 , 1)
      return events
    } else {
      return []
    }
  }

  // sort event array by vectorclock and peerid
  private sortCausally(events: StoredEvent[]): StoredEvent[] {
    events.sort((a, b) => {
      const vcComp = VectorClock.compareValues(a, b)
      if (vcComp === 0) {
        return a.peerid < b.peerid ? -1 : (a.peerid > b.peerid ? 1 : 0)
      } else {
        return vcComp
      }
    })
    return events
  }

}
